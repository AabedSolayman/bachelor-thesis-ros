#include "ros/ros.h"

#include "obstacle_detector/Obstacles.h"
#include "geometry_msgs/Pose.h"
#include "geometry_msgs/Point.h"

#include <sstream>




class PoseFinder
{
private:
	geometry_msgs:: Point point_top();
	geometry_msgs:: Point point_bottom();
public:
	PoseFinder(){
		ros::Subscriber sub_top = n.subscribe("/lidar_top/raw_obstacles",1000,obstaclesTopCallback);
		ros::Subscriber sub_bottom = n.subscribe("/lidar_bottom/raw_obstacles",1000,obstaclesTopCallback);

	}
}


void obstaclesTopCallback(const obstacle_detector::Obstacles::ConstPtr& msg)
{
	geometry_msgs::Point point_top = msg->circles[0].center;

}

void obstaclesBottomCallback(const obstacle_detector::Obstacles::ConstPtr& msg)
{
	point_bottom= msg->circles[0].center;
}


int main(int argc, char **argv)
{

	ros::init(argc, argv, "obstacles_listener");

	ros::NodeHandle n;

	ros::Subscriber sub_top = n.subscribe("/lidar_top/raw_obstacles",1000,obstaclesTopCallback);
	ros::Subscriber sub_bottom = n.subscribe("/lidar_bottom/raw_obstacles",1000,obstaclesTopCallback);


}
