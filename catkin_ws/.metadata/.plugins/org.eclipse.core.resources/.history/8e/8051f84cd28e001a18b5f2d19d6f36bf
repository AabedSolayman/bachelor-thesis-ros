#include "ros/ros.h"
#include "obstacle_detector/Obstacles.h"
#include <tf/transform_datatypes.h>
#include "geometry_msgs/Pose.h"
#include "geometry_msgs/TransformStamped.h"
#include "geometry_msgs/Point.h"
#include "math.h"
#include <iostream>

#include <tf2_ros/transform_broadcaster.h>

class PoseFinder {

private:

	//geomtery_msgs of the robot
	geometry_msgs::Point pointTop;
	geometry_msgs::Point pointBottom;
	geometry_msgs::Pose robotPose_;
	geometry_msgs::TransformStamped robotTransformStamped;
	geometry_msgs::Transform robotTransform_;

	// Angle of orientation around the z Axis
	double yawRad = 0;

	tf::Quaternion robotOrientation;

	ros::Publisher pubPose;
	ros::Subscriber subTop;
	ros::Subscriber subBottom;
	ros::NodeHandle n;

public:
	PoseFinder() {

		// Subscribe to the pose of top and bottom points
		subTop = n.subscribe("/lidar_top/raw_obstacles", 1000,
				&PoseFinder::obstaclesTopCallback, this);

		subBottom = n.subscribe("/lidar_bottom/raw_obstacles", 1000,
				&PoseFinder::obstaclesBottomCallback, this);

		// Publish the transform of the robot
		pubPose = n.advertise<geometry_msgs::TransformStamped>("robot_tf", 1000);
		robotTfPublisher();
		ros::spin();

	}

	void obstaclesTopCallback(
			const obstacle_detector::Obstacles::ConstPtr &msg) {

		if (!msg->circles.empty())
			pointTop = msg->circles[0].center;

	}

	void obstaclesBottomCallback(
			const obstacle_detector::Obstacles::ConstPtr &msg) {

		if (!msg->circles.empty())
			pointBottom = msg->circles[0].center;
	}

	void robotTfPublisher() {
		while (ros::ok()) {
			robotTransformStamped.header.frame_id = "/map";
			robotTransformStamped.child_frame_id = "/robot";
			robotTransformStamped.header.stamp = ros::Time::now();

			robotTransformStamped.transform = robotTransform();

			static tf2_ros::TransformBroadcaster br;

			br.sendTransform(robotTransformStamped);
			ros::spinOnce();
			ros::Rate loop_rate(10);
			loop_rate.sleep();

		}
	}

	geometry_msgs::Transform robotTransform() {
		robotTransform_.translation.x = (pointTop.x + pointBottom.x) / 2;
		robotTransform_.translation.y = (pointTop.y + pointBottom.y) / 2;

		yawRad = atan2(pointTop.y-robotTransform_.translation.y,
					   pointTop.x-robotTransform_.translation.x);

		robotTransform_.rotation = tf::createQuaternionMsgFromYaw(yawRad+1.5708);

		return robotTransform_;
	}

};

int main(int argc, char **argv) {

	ros::init(argc, argv, "pose_detector");

	PoseFinder pF;
	return 0;
}
